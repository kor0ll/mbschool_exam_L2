package pattern

import "fmt"

/*
	Реализовать паттерн «комманда».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Command_pattern
*/

/*
Команда - поведенческий паттерн, который превращает запросы в объекты, позволяя передавать их как аргументы при вызове методов,
ставить их в очередь, логгировать их или поддерживать отмену операций. Каждый вызов, отличающийся от других, следует завернуть в собственный класс
с единственным методом, который и будет осуществлять вызов. Такие объекты называются командами.
Например: телевизор может быть включен двумя способами - кнопка ВКЛ на пульте или кнопка ВКЛ на самом телевизоре. К объектам интерфейса (в данном случае
к кнопкам ВКЛ и ВЫКЛ) будет привязан объект команды, который осуществляет отправку запроса. Кнопка вызовет команду, а та - позаботится обо всем остальном

Плюсами команд являются реализация открытости/закрытости и отсутствием прямой зависимости между UI и бизнес логикой
Минусом является усложнение кода программы из за введения множества дополнительных классов
*/

// определяем общий интерфейс для команд с методом, который будет выполнять запросы
type Command interface {
	execute()
}

// у каждой кнопки есть определенная команда
type Button struct {
	command Command
}

// при нажатии на кнопку вызывается execute у команды, вложенной в кнопку
func (b *Button) press() {
	b.command.execute()
}

// конкретные команды ON и OFF
type OnCommand struct {
	device Device
}

func (c *OnCommand) execute() {
	c.device.on()
}

type OffCommand struct {
	device Device
}

func (c *OffCommand) execute() {
	c.device.off()
}

// интерфейс получателя команд
type Device interface {
	on()
	off()
}

// конкретная реализация получателя, в нашем случае телевизор
type Tv struct {
	isRunning bool
}

func (t *Tv) on() {
	t.isRunning = true
	fmt.Println("Turning tv on")
}

func (t *Tv) off() {
	t.isRunning = false
	fmt.Println("Turning tv off")
}
